package channelserver

import (
	"erupe-ce/common/byteframe"
	"erupe-ce/network/mhfpacket"
)

func handleMsgMhfGetTowerInfo(s *Session, p mhfpacket.MHFPacket) {
	pkt := p.(*mhfpacket.MsgMhfGetTowerInfo)
	var data [][]byte
	bf := byteframe.NewByteFrame()
	switch pkt.InfoType {
	case mhfpacket.TowerInfoTypeTowerRankPoint:
		bf.WriteUint32(635)      // TR
		bf.WriteUint32(13716950) // TRP
		data = [][]byte{
			bf.Data(),
		}
	case mhfpacket.TowerInfoTypeGetOwnTowerSkill:
		bf.WriteUint32(100) // TSP
		skills := make([]uint16, 64)
		skills[1] = 5
		skills[2] = 5
		skills[5] = 2
		skills[14] = 3
		skills[15] = 3
		skills[18] = 3
		skills[19] = 5
		skills[20] = 5
		skills[22] = 3
		skills[23] = 3
		skills[24] = 3
		skills[25] = 3
		skills[26] = 3
		skills[27] = 3
		skills[28] = 2
		skills[29] = 3
		skills[30] = 1
		skills[31] = 3
		skills[32] = 2
		skills[33] = 2
		skills[34] = 3
		skills[35] = 1
		for i := range skills {
			bf.WriteUint16(skills[i])
		}
		data = [][]byte{
			bf.Data(),
		}
	case mhfpacket.TowerInfoTypeTowerTouhaHistory:
		for i := 0; i < 10; i++ {
			bf.WriteUint16(uint16(i + 1))
		}
		data = [][]byte{
			bf.Data(),
		}
	default:
		s.logger.Warn("Unknown GetTowerInfo request")
	}
	doAckEventEnum(s, pkt.AckHandle, data)
}

func handleMsgMhfPostTowerInfo(s *Session, p mhfpacket.MHFPacket) {
	pkt := p.(*mhfpacket.MsgMhfPostTowerInfo)
	doAckSimpleSucceed(s, pkt.AckHandle, []byte{0x00, 0x00, 0x00, 0x00})
}

func handleMsgMhfGetTenrouirai(s *Session, p mhfpacket.MHFPacket) {
	// if the game gets bad responses for this it breaks the ability to save
	pkt := p.(*mhfpacket.MsgMhfGetTenrouirai)
	var data [][]byte
	if pkt.Unk0 == 1 {
		data = [][]byte{
			{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06},
		}
	} else if pkt.Unk2 == 4 {
		data = [][]byte{
			{0x01, 0x01, 0x00, 0x50, 0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02},
			{0x01, 0x04, 0x00, 0x10, 0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02},
			{0x01, 0x06, 0x00, 0x32, 0x00, 0x00, 0x02, 0x02, 0x01, 0x00, 0x02, 0x02},
			{0x01, 0x04, 0x00, 0x0C, 0x00, 0x32, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02},
			{0x01, 0x03, 0x00, 0x32, 0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02},
			{0x02, 0x05, 0x9C, 0x40, 0x00, 0x00, 0x02, 0x02, 0x01, 0x00, 0x02, 0x02},
			{0x01, 0x05, 0xC3, 0x50, 0x00, 0x32, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02},
			{0x02, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02},
			{0x02, 0x03, 0x00, 0x32, 0x00, 0x00, 0x02, 0x01, 0x01, 0x00, 0x01, 0x02},
			{0x02, 0x03, 0x00, 0x28, 0x00, 0x32, 0x02, 0x01, 0x01, 0x01, 0x01, 0x02},
			{0x02, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x02, 0x01, 0x01, 0x01, 0x01, 0x02},
			{0x02, 0x06, 0x00, 0x28, 0x00, 0x00, 0x02, 0x01, 0x01, 0x00, 0x01, 0x02},
			{0x01, 0x01, 0x00, 0x3C, 0x00, 0x32, 0x02, 0x01, 0x02, 0x01, 0x01, 0x02},
			{0x01, 0x05, 0xC3, 0x50, 0x00, 0x00, 0x03, 0x01, 0x02, 0x01, 0x01, 0x02},
			{0x01, 0x06, 0x00, 0x32, 0x00, 0x00, 0x03, 0x01, 0x02, 0x00, 0x01, 0x02},
			{0x01, 0x04, 0x00, 0x10, 0x00, 0x32, 0x03, 0x01, 0x02, 0x01, 0x01, 0x02},
			{0x01, 0x05, 0xC3, 0x50, 0x00, 0x00, 0x03, 0x01, 0x02, 0x01, 0x01, 0x02},
			{0x02, 0x03, 0x00, 0x28, 0x00, 0x00, 0x03, 0x01, 0x02, 0x00, 0x01, 0x02},
			{0x01, 0x03, 0x00, 0x32, 0x00, 0x32, 0x03, 0x01, 0x02, 0x01, 0x01, 0x02},
			{0x02, 0x05, 0x9C, 0x40, 0x00, 0x00, 0x03, 0x01, 0x02, 0x01, 0x01, 0x01},
			{0x02, 0x06, 0x00, 0x28, 0x00, 0x00, 0x03, 0x01, 0x02, 0x00, 0x01, 0x01},
			{0x02, 0x01, 0x00, 0x3C, 0x00, 0x32, 0x03, 0x01, 0x02, 0x01, 0x01, 0x01},
			{0x02, 0x06, 0x00, 0x32, 0x00, 0x00, 0x03, 0x01, 0x02, 0x01, 0x01, 0x01},
			{0x02, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x03, 0x01, 0x02, 0x00, 0x01, 0x01},
			{0x01, 0x01, 0x00, 0x50, 0x00, 0x32, 0x03, 0x01, 0x02, 0x01, 0x01, 0x01},
			{0x01, 0x05, 0x9C, 0x40, 0x00, 0x00, 0x03, 0x01, 0x02, 0x01, 0x01, 0x01},
			{0x01, 0x03, 0x00, 0x32, 0x00, 0x00, 0x03, 0x01, 0x02, 0x00, 0x01, 0x01},
			{0x01, 0x04, 0x00, 0x10, 0x00, 0x32, 0x03, 0x01, 0x00, 0x01, 0x01, 0x01},
			{0x01, 0x06, 0x00, 0x32, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x01, 0x01},
			{0x02, 0x03, 0x00, 0x28, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x01, 0x01},
			{0x01, 0x01, 0x00, 0x50, 0x00, 0x32, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01},
			{0x02, 0x05, 0x9C, 0x40, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01},
			{0x02, 0x06, 0x00, 0x28, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01},
		}
	} else {
		s.logger.Warn("Unknown GetTenrouirai request")
	}
	doAckEventEnum(s, pkt.AckHandle, data)
}

func handleMsgMhfPostTenrouirai(s *Session, p mhfpacket.MHFPacket) {
	pkt := p.(*mhfpacket.MsgMhfPostTenrouirai)
	doAckSimpleSucceed(s, pkt.AckHandle, make([]byte, 4))
}

func handleMsgMhfGetBreakSeibatuLevelReward(s *Session, p mhfpacket.MHFPacket) {}

func handleMsgMhfGetWeeklySeibatuRankingReward(s *Session, p mhfpacket.MHFPacket) {
	pkt := p.(*mhfpacket.MsgMhfGetWeeklySeibatuRankingReward)
	doAckSimpleSucceed(s, pkt.AckHandle, make([]byte, 4))
}

func handleMsgMhfPresentBox(s *Session, p mhfpacket.MHFPacket) {
	pkt := p.(*mhfpacket.MsgMhfPresentBox)
	doAckSimpleSucceed(s, pkt.AckHandle, make([]byte, 4))
}

func handleMsgMhfGetGemInfo(s *Session, p mhfpacket.MHFPacket) {
	pkt := p.(*mhfpacket.MsgMhfGetGemInfo)
	data := [][]byte{
		{0x00, 0x00, 0x00, 0x01},
	}
	doAckEventEnum(s, pkt.AckHandle, data)
}

func handleMsgMhfPostGemInfo(s *Session, p mhfpacket.MHFPacket) {}
